plugins {
    id 'java'
    id 'jacoco'
}

group 'liteweb'
version '1.0'

targetCompatibility = JavaVersion.VERSION_20
targetCompatibility = JavaVersion.VERSION_20

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['--enable-preview', '-Xlint:preview']
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    jvmArgs += '--enable-preview'
}

tasks.withType(JavaExec).configureEach {
    jvmArgs += '--enable-preview'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.6.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'liteweb.Server'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion '0.8.10'
}

tasks.withType(Test).configureEach {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

tasks.register("testCoverage", JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for the test build."
    dependsOn(test)

    reports {
        html { enabled true }
        xml { enabled true }
        csv { enabled true }
    }

    def excludes = [
            '**/*Test*.*',
            '**/actions/*.*',
    ]

    def javaClasses = fileTree(dir: "${buildDir}/classes/java/main", excludes: excludes)
    classDirectories.from = files([javaClasses])

    sourceDirectories.from = files([
            "$project.projectDir/src/main/java",
    ])

    executionData.from = files("${project.buildDir}/jacoco/test.exec")
}
