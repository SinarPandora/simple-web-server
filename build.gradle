plugins {
    id 'java'
    id 'jacoco'
}

group 'liteweb'
version '1.0'

sourceCompatibility = 11

tasks.withType(Test) {
    useJUnitPlatform()
}

dependencies {
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.6.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'liteweb.Server'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = 'exclude'
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion '0.8.0'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}


tasks.create(name: "testCoverage", type: JacocoReport, dependsOn: "test") {

    group = "Reporting"
    description = "Generate Jacoco coverage reports for the test build."

    reports {
        html.enabled( true)
        xml.enabled(true)
        csv.enabled(true)
    }

    def excludes = [
            '**/*Test*.*',
            '**/actions/*.*',
    ]

    def javaClasses = fileTree(dir: "${buildDir}/classes/java/main", excludes: excludes)
    classDirectories.from = files([javaClasses])

    sourceDirectories.from = files([
            "$project.projectDir/src/main/java",

    ])

    executionData.from = files("${project.buildDir}/jacoco/test.exec")
}
